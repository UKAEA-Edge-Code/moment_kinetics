# Based on example from https://github.com/julia-actions/julia-runtest
name: Debug checks for correctness

on: [push, pull_request]

jobs:
  debug-checks:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        include:
          - julia_version: '1.8'
          # Use  julia-1.7 for macOS because otherwise the job hangs
          - julia_version: '1.7'
            os: macOS-latest
      fail-fast: false
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v2
      - uses: mpi4py/setup-mpi@v1
        with:
          mpi: 'openmpi'
      - uses: actions/setup-python@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia_version }}
          arch: x64
      # Install a specific Plots.jl version, because the job hangs on macOS with
      # Plots.jl@1.38.8
      - name: Pin dependency versions
        if: matrix.os == 'macOS-latest'
        run: julia --project -e 'using Pkg; Pkg.add([PackageSpec(name="Plots", version="1.24.3")])'
      - uses: julia-actions/julia-buildpkg@v1
        env:
          # Use the system Python for PyCall - avoids library linking error on macOS
          PYTHON: "${{ env.pythonLocation }}/bin/python"
      - name: Test examples
        run: |
          pip3 install --user matplotlib
          julia --project -e 'using MPIPreferences; MPIPreferences.use_system_binary()'
          julia --project -e 'using Pkg; Pkg.build("MPI"; verbose=true)'
          # Need to use openmpi so that the following arguments work:
          # * `--mca rmaps_base_oversubscribe 1` allows oversubscription (more processes
          #   than physical cores).
          # * `--mca mpi_yield_when_idle 1` changes a setting to prevent excessively
          #   terrible performance when oversubscribing.
          mpiexec -np 4 --mca rmaps_base_oversubscribe 1 julia --project --check-bounds=yes --compiled-modules=no debug_test/runtests.jl --debug 99
