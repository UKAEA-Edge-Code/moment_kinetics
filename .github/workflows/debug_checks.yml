# Based on example from https://github.com/julia-actions/julia-runtest
name: Debug checks for correctness

on: [push, pull_request]

jobs:
  debug-checks:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Only run on linux to save CI server cpu-hours
        os: [ubuntu-latest]
      fail-fast: false
    timeout-minutes: 240

    steps:
      - uses: actions/checkout@v2
      - uses: mpi4py/setup-mpi@v1
        with:
          mpi: 'openmpi'
      - uses: actions/setup-python@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1.8'
          arch: x64
      - uses: julia-actions/julia-buildpkg@v1
        env:
          # Use the system Python for PyCall - avoids library linking error on macOS
          PYTHON: "${{ env.pythonLocation }}/bin/python"
      - name: Debug test
        run: |
          # Hard code the debug level so that we can run without using the
          # `--compiled-modules=no` flag, which breaks Symbolics.jl at the
          # moment.
          sed -i -e "s/_debug_level = get_options.*/_debug_level = 2/" src/debugging.jl

          pip3 install --user matplotlib
          julia --project -e 'using MPIPreferences; MPIPreferences.use_system_binary()'
          julia --project -e 'using Pkg; Pkg.build("MPI"; verbose=true)'

          # Need to use openmpi so that the following arguments work:
          # * `--mca rmaps_base_oversubscribe 1` allows oversubscription (more processes
          #   than physical cores).
          # * `--mca mpi_yield_when_idle 1` changes a setting to prevent excessively
          #   terrible performance when oversubscribing.
          ## Don't use --compiled-modules=no for now, as it currently breaks Symbolics.jl
          #mpiexec -np 4 --mca rmaps_base_oversubscribe 1 julia --project --check-bounds=yes --compiled-modules=no debug_test/sound_wave_tests.jl --debug 2
          mpiexec -np 4 --mca rmaps_base_oversubscribe 1 julia --project --check-bounds=yes debug_test/runtests.jl --debug 2
